/*
    謹慎一點的話應該要Sort Array，因為題目沒有講這是排好的。
    Dp[i] = 為i的組合數，dp[i] = sum(dp[i - num]) num是提供的數字。
    Dp[0] = 1
    以[1, 2, 3] target = 4為例：
    Dp  0   1   2     3        4         
        1   1   2     4        7
    組合   (1)  1 1  1 1 1    1 1 1 1
                2    1 2      1 1 2
                     2 1      1 2 1
                     3        1 3
                              2 1 1
                              2 2
                              3 1
    算dp[1]時，dp[1 - 1]，也就是i以1開頭有幾種組合。
    算dp[2]時，dp[2 - 1]，也就是i以1開頭有幾種組合有一種，1 (1)  (1)是dp[1]。
                        dp[2 - 2]，也就是i以2開頭有幾種組合有一種，2。
    算dp[3]時，dp[3 - 1]，也就是i以1開頭有幾種組合有2種，1 (1 1),  1(2)。
                        dp[3 - 2]，也就是i以2開頭有幾種組合有1種，2 (1)。
                        dp[3 - 3]，也就是i以3開頭有幾種組合有一種，3。
    算dp[4]時，dp[4 - 1]，也就是i以1開頭有幾種組合有4種，從dp[3]來，1 (1 1 1), 1 (1 2), 1 (2 1), 1 (3)
                        dp[4 - 2]，也就是i以2開頭有幾種組合有2種，從dp[2]來。2 (1 1), 2 (2)
                        dp[4 - 3]，也就是i以3開頭有幾種組合有1種，從dp[1]來。 3 (1)
    算dp[5]時，dp[5 - 1]，也就是i以1開頭有幾種組合有7種，從dp[4]來，1 (1 1 1 1), 1 (1 1 2), 1 (1 2 1), 1 (1 3), 1 (2 1 1), 1 (2 2), 1 (3 1)
                        dp[5 - 2]，也就是i以2開頭有幾種組合有3種，從dp[3]來。2 (1 1 1), 2 (1 2), 2(2 1) , 2(3)
                        dp[5 - 3]，也就是i以3開頭有幾種組合有1種，從dp[2]來。 3 (1 1), 3(2)
*/

class Solution {
  public int combinationSum4(int[] nums, int target) {
      int[] dp = new int[target + 1];
      dp[0] = 1;
      
      for (int i = 1; i <= target; i++) {
          for (int num: nums) {
              if (i >= num) {
                  dp[i] += dp[i - num];
              }
          }
      }
      return dp[target];
  }
}